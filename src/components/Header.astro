---
import CodeIcon from "./icons/CodeIcon.astro";
import MoonIcon from "./icons/MoonIcon.astro";
import SunIcon from "./icons/SunIcon.astro";
---

<header class="w-full">
  <nav class="flex items-center mx-auto p-4 gap-4 max-w-screen-2xl">
    <div
      class="flex justify-center items-center p-3 border rounded-full bg-white border-gray-200 dark:bg-gray-800 dark:border-gray-700"
    >
      <a href="/">
        <CodeIcon class="size-8 stroke-orange-500" />
      </a>
    </div>
    <div
      class="flex flex-1 justify-between items-center p-4 border rounded-full bg-white border-gray-200 dark:bg-gray-800 dark:border-gray-700"
    >
      <a
        href="#about-me"
        class="font-medium text-gray-900 dark:text-white hover:text-orange-500 transition duration-100"
        >About me</a
      >
      <a
        href="#experience"
        class="font-medium text-gray-900 dark:text-white hover:text-orange-500 transition duration-100"
        >Experience</a
      >
      <a
        href="#projects"
        class="font-medium text-gray-900 dark:text-white hover:text-orange-500 transition duration-100"
        >Projects</a
      >
      <a
        href="#contact"
        class="font-medium text-gray-900 dark:text-white hover:text-orange-500 transition duration-100"
        >Contact</a
      >
    </div>
    <div
      class="flex justify-center items-center p-3 border rounded-full bg-white border-gray-200 dark:bg-gray-800 dark:border-gray-700"
    >
      <label id="theme-toggle" class="theme-toggle" title="Toggle theme">
        <input id="checkbox-theme-toggle" type="checkbox" class="hidden" />

        <SunIcon
          class="size-8 absolute transition-all delay-100 scale-0 cursor-pointer dark:scale-100 dark:rotate-[360deg] stroke-yellow-500"
        />
        <MoonIcon
          class="size-8 transition-all delay-100 cursor-pointer dark:scale-0 dark:rotate-[360deg] stroke-yellow-500"
        />
      </label>
    </div>
  </nav>
</header>
<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
    document.getElementById("checkbox-theme-toggle").checked = true;
  } else {
    document.documentElement.classList.add("dark");
    document.getElementById("checkbox-theme-toggle").checked = false;
  }

  window.localStorage.setItem("theme", theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    const check = document.getElementById("checkbox-theme-toggle");

    !check.checked;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  };

  document
    .getElementById("checkbox-theme-toggle")
    .addEventListener("click", handleToggleClick);
</script>
